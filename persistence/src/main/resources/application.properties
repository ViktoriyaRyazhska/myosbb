# DataSource settings: set here your own configurations for the database
# connection. In this example we have "osbb" as database name and
# "root" as username and password.

spring.datasource.driver-class-name = @db.driver@

spring.datasource.url = @db.connectionURL@
spring.datasource.username = @db.username@
spring.datasource.password = @db.password@

spring.profiles.active = mariadb

#Adding file for auto insert into db
spring.jpa.properties.hibernate.hbm2ddl.import_files=import.sql

server.context-path=/myosbb
server.port=8081

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1
spring.datasource.initial-size=1
spring.datasource.max-active=10
spring.datasource.max-idle=5
spring.datasource.min-idle=1

# Show or not log for each sql query
spring.jpa.show-sql = true

entitymanager.packagesToScan = com.softserve.osbb

#implementing second level cache
#no second level cache yet implemented

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project

# Liquibase
liquibase.change-log = classpath:/db/changelog/db.changelog-master.json
liquibase.enabled = true

#specifying logging configurations
logging.level.org.springframework.web = INFO
logging.level.com.softserve.osbb = DEBUG
logging.level.org.hibernate = ERROR

#specify email sending configurations
spring.mail.host = smtp.gmail.com
spring.mail.username = housing.coop.osbb@gmail.com
spring.mail.password = parolforcoop
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false


app.fileServer=http://localhost:80
app.filepath=C:\\Users\\User

# attachment storage
# workaround without Apache
file.upload.path = /usr/tomcat7/webapps/myosbb/WEB-INF/classes/public/static/
file.download.url = http://192.168.195.250:8081/myosbb/static/

# configuration to use Apache
#file.upload.path = ${file.separator} + "var" + ${file.separator} + "www" + ${file.separator} + \
#                   "html" + ${file.separator} + "static" + ${file.separator}
#file.download.url = http://192.168.195.250:80/static/

# to run locally
#file.upload.path = ${file.separator} + "var" + ${file.separator} + "www" + \
#                   ${file.separator} + "html" + ${file.separator} + "static" + ${file.separator}
#file.download.url = http://localhost:80/static/
